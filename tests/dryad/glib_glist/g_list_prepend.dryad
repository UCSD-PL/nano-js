define pred dll^(x):
 (
	 (((x l= nil) & emp) |

	  ((x |-> loc next: y) & (y l= nil))) |

	   (
	        (((x |-> loc next: nxt) * (nxt |-> secondary prev: x)) * true) &
	        (  (x |-> loc next: nxt) * ((~(nxt l= nil)) & dll^(nxt)) )
		)
 )
 axiom: sll^(x);
	 
define set-fun keys^(x):
  (case (x l= nil): emptyset;
   case ((x |-> loc next: nxt; int key: ky) * true): 
   	((singleton ky) union keys^(nxt));
   default: emptyset
  ) ;

define int-fun length^(x):
  (case (x l= nil): 0;
   case ((x |-> loc next: nxt; int key: ky) * true): 
   	(1 + length^(nxt));
   default: 0
  ) ;

define pred sll^(x): 
  ( 
	((x l= nil) & emp) | 
          ((x |-> loc next: nxt) * sll^(nxt))  
  )
  axiom: (lseg^(x, x) * (((x l= nil) & (length^(x) i= 0)) | ((~ (x l= nil)) & (0 < length^(x)))));

define relation lseg^(head, tail): 
  ( 
	((head l= tail) & emp) | 
          ((head |-> loc next: nxt) * lseg^(nxt, tail))  
  ) 
  axiom: ( (((head l= tail) => (emp & ((lseg-length^(head, tail) i= 0) & (lseg-keys^(head, tail) s= emptyset)))) & ((tail l= nil) => (sll^(head) & ((length^(head) i= lseg-length^(head, tail)) & (keys^(head) s= lseg-keys^(head, tail)))))) &
	( (sll^(tail) -* (sll^(head) & ( (keys^(head) s= (lseg-keys^(head, tail) union keys^(tail))) & (length^(head) i= (lseg-length^(head, tail) + length^(tail))) ))) &
	  (((tail |-> loc next: virtual tn) * sll^(tn)) -* ((lseg^(head, tn) & ( (lseg-keys^(head, tn) s= (lseg-keys^(head, tail) union (singleton tk))) & (lseg-length^(head, tn) i= (lseg-length^(head, tail) + 1)) )) * sll^(tn))) ) ) ;

define bin-set-fun lseg-keys^(head, tail):
  (case (head l= tail) : emptyset;
   case ((head |-> loc next: nxt; int key: ky) * true): 
   	((singleton ky) union lseg-keys^(nxt, tail));
   default: emptyset
  ) ;

define bin-int-fun lseg-length^(head, tail):
  (case (head l= tail) : 0;
   case ((head |-> loc next: nxt; int key: ky) * true): 
   	(1 + lseg-length^(nxt, tail));
   default: 0
  ) ;


bb g-list-prepend-nil:
pre: ( (((list l= nil) & (p l= nil)) | ( ((p l= nil) | (p |-> loc next: list)) * 
	(dll^(list) & ((list |-> loc prev: p) * true)) )) & ((keys^(list) s= lks) * true) ) ;
post: ( ((p l= nil) | (p |-> loc next: ret)) * 
	((dll^(ret) & (keys^(ret) s= (lks union (singleton data)))) & ((ret |-> loc prev: p; int key: data) * true)) ) ;
{
	malloc ret;
	int ret.key := data;
	loc ret.next := list;
	assume (list l== nil);
	loc ret.prev := list;
}

bb g-list-prepend-p-nil:
pre: ( (((list l= nil) & (p l= nil)) | ( ((p l= nil) | (p |-> loc next: list)) * 
	(dll^(list) & ((list |-> loc prev: p) * true)) )) & ((keys^(list) s= lks) * true) ) ;
post: ( ((p l= nil) | (p |-> loc next: ret)) * 
	((dll^(ret) & (keys^(ret) s= (lks union (singleton data)))) & ((ret |-> loc prev: p; int key: data) * true)) ) ;
{
	malloc ret;
	int ret.key := data;
	loc ret.next := list;
	assume (! (list l== nil));
	loc ret.prev := p;
	assume (p l== nil);
	loc list.prev := ret;
}

bb g-list-prepend-p-not-nil:
pre: ( (((list l= nil) & (p l= nil)) | ( ((p l= nil) | (p |-> loc next: list)) * 
	(dll^(list) & ((list |-> loc prev: p) * true)) )) & ((keys^(list) s= lks) * true) ) ;
post: ( ((p l= nil) | (p |-> loc next: ret)) * 
	((dll^(ret) & (keys^(ret) s= (lks union (singleton data)))) & ((ret |-> loc prev: p; int key: data) * true)) ) ;
{
	malloc ret;
	int ret.key := data;
	loc ret.next := list;
	assume (! (list l== nil));
	loc ret.prev := p;
	assume (! (p l== nil));
	loc p.next := ret;
	loc list.prev := ret;
}
