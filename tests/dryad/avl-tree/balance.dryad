define pred avl^(x): 
  ( ((x l= nil) & emp) |
    (
        (x |-> loc left: lft; loc right: rgt; int key: ky; int hight: hgt) * 
        (
	 (
	  (avl^(lft) & (keys^(lft) set-lt ky)) *
	  (avl^(rgt) & (ky lt-set keys^(rgt)))
	 ) &
	 (
	  ((height^(lft) i= height^(rgt)) & ((hgt i= (height^(lft) + 1)) * true)) 	   |
	  ( ((height^(lft) i= (height^(rgt) + 1)) & ((hgt i= (height^(rgt) + 2)) * true) ) |
	  ((height^(rgt) i= (height^(lft) + 1)) & ((hgt i= (height^(lft) + 2)) * true) ) )
	)
       )
    )
  ) ;

define set-fun keys^(x):
  (case (x l= nil): emptyset;
   case ((x |-> loc left: lft; loc right: rgt; int key: ky; int hight: hgt) * true): 
   	((singleton ky) union (keys^(lft) union keys^(rgt)));
   default: emptyset
  ) ;

define int-fun height^(x):
  (case (x l= nil): 0;
   case (((x |-> loc left: lft; loc right: rgt; int key: ky; int hight: hgt) * true) &
	((height^(lft) < height^(rgt)) * true)): 
   	(height^(rgt) + 1);
   default: (height^(lft) + 1)
  ) ;



bb left:
pre: ((
	((x |-> loc left: clft; loc right: crgt; int key: cky; int hight: chgt) *
     (((((keys^(clft) s= lks) & (height^(clft) i= lht)) & avl^(clft)) & (keys^(clft) set-lt cky)) *
     ((((keys^(crgt) s= rks) & (height^(crgt) i= rht)) & avl^(crgt)) & (cky lt-set keys^(crgt))))) &
	 ((rht <= (lht + 2)) & (lht <= (rht + 2)))) & 
	((((crgt l= nil) | ((crgt |-> loc left: rgtlft; loc right: rgtrgt) * ((height^(rgtlft) i= rlht) * (height^(rgtrgt) i= rrht)))) *
	((clft l= nil) | ((clft |-> loc left: lftlft; loc right: lftrgt) * ((height^(lftlft) i= llht) * (height^(lftrgt) i= lrht))))) * true) );

post: ((avl^(ret) & (keys^(ret) s= ((singleton cky) union (lks union rks)))) & 
	  (((((rht i= (lht + 1)) & (height^(ret) i= (rht + 1))) |
	   ((lht i= (rht + 1)) & (height^(ret) i= (lht + 1)))) |
	   ((lht i= rht) & (height^(ret) i= (lht + 1)))) |
	  (((((rht i= (lht + 2)) & (rlht i= rrht)) & (height^(ret) i= (rht + 1))) | (((rht i= (lht + 2)) & (~ (rlht i= rrht))) & (height^(ret) i= rht))) |
	  ((((lht i= (rht + 2)) & (llht i= lrht)) & (height^(ret) i= (lht + 1))) | (((lht i= (rht + 2)) & (~ (llht i= lrht))) & (height^(ret) i= lht)))))
	  ) ;
{
	assume (rht i== lht + 2);
	assume (! (rrht < rlht));
	int newxht := rlht + 1;
	int x.hight := newxht;
	int retht := rlht + 2;
	int crgt.hight := retht;
	loc x.right := rgtlft;
	loc crgt.left := x;
	loc ret := crgt;
}

bb right-left:
pre: ((
	((x |-> loc left: clft; loc right: crgt; int key: cky; int hight: chgt) *
     (((((keys^(clft) s= lks) & (height^(clft) i= lht)) & avl^(clft)) & (keys^(clft) set-lt cky)) *
     ((((keys^(crgt) s= rks) & (height^(crgt) i= rht)) & avl^(crgt)) & (cky lt-set keys^(crgt))))) &
	 ((rht <= (lht + 2)) & (lht <= (rht + 2)))) & 
	((((crgt l= nil) | ((crgt |-> loc left: rgtlft; loc right: rgtrgt) * ((height^(rgtlft) i= rlht) * (height^(rgtrgt) i= rrht)))) *
	((clft l= nil) | ((clft |-> loc left: lftlft; loc right: lftrgt) * ((height^(lftlft) i= llht) * (height^(lftrgt) i= lrht))))) * true) );

post: ((avl^(ret) & (keys^(ret) s= ((singleton cky) union (lks union rks)))) & 
	  (((((rht i= (lht + 1)) & (height^(ret) i= (rht + 1))) |
	   ((lht i= (rht + 1)) & (height^(ret) i= (lht + 1)))) |
	   ((lht i= rht) & (height^(ret) i= (lht + 1)))) |
	  (((((rht i= (lht + 2)) & (rlht i= rrht)) & (height^(ret) i= (rht + 1))) | (((rht i= (lht + 2)) & (~ (rlht i= rrht))) & (height^(ret) i= rht))) |
	  ((((lht i= (rht + 2)) & (llht i= lrht)) & (height^(ret) i= (lht + 1))) | (((lht i= (rht + 2)) & (~ (llht i= lrht))) & (height^(ret) i= lht)))))
	  ) ;
{
	assume (rht i== lht + 2);
	assume (rrht < rlht);
	loc xrll := rgtlft.left;
	loc xrlr := rgtlft.right;
	int newxht := lht + 1;
	int x.hight := newxht;
	int newnewrht := rrht + 1;
	int crgt.hight := newnewrht;
	int retht := lht + 2;
	int rgtlft.hight := retht;
	loc x.right := xrll;
	loc crgt.left := xrlr;
	loc rgtlft.right := crgt;
	loc rgtlft.left := x;
	loc ret := rgtlft;
}

bb right:
pre: ((
	((x |-> loc left: clft; loc right: crgt; int key: cky; int hight: chgt) *
     (((((keys^(clft) s= lks) & (height^(clft) i= lht)) & avl^(clft)) & (keys^(clft) set-lt cky)) *
     ((((keys^(crgt) s= rks) & (height^(crgt) i= rht)) & avl^(crgt)) & (cky lt-set keys^(crgt))))) &
	 ((rht <= (lht + 2)) & (lht <= (rht + 2)))) & 
	((((crgt l= nil) | ((crgt |-> loc left: rgtlft; loc right: rgtrgt) * ((height^(rgtlft) i= rlht) * (height^(rgtrgt) i= rrht)))) *
	((clft l= nil) | ((clft |-> loc left: lftlft; loc right: lftrgt) * ((height^(lftlft) i= llht) * (height^(lftrgt) i= lrht))))) * true) );

post: ((avl^(ret) & (keys^(ret) s= ((singleton cky) union (lks union rks)))) & 
	  (((((rht i= (lht + 1)) & (height^(ret) i= (rht + 1))) |
	   ((lht i= (rht + 1)) & (height^(ret) i= (lht + 1)))) |
	   ((lht i= rht) & (height^(ret) i= (lht + 1)))) |
	  (((((rht i= (lht + 2)) & (rlht i= rrht)) & (height^(ret) i= (rht + 1))) | (((rht i= (lht + 2)) & (~ (rlht i= rrht))) & (height^(ret) i= rht))) |
	  ((((lht i= (rht + 2)) & (llht i= lrht)) & (height^(ret) i= (lht + 1))) | (((lht i= (rht + 2)) & (~ (llht i= lrht))) & (height^(ret) i= lht)))))
	  ) ;
{
	assume (lht i== rht + 2);
	assume (! (llht < lrht));
	int newxht := lrht + 1;
	int x.hight := newxht;
	int retht := lrht + 2;
	int clft.hight := retht;
	loc x.left := lftrgt;
	loc clft.right := x;
	loc ret := clft;
}

bb left-right:
pre: ((
	((x |-> loc left: clft; loc right: crgt; int key: cky; int hight: chgt) *
     (((((keys^(clft) s= lks) & (height^(clft) i= lht)) & avl^(clft)) & (keys^(clft) set-lt cky)) *
     ((((keys^(crgt) s= rks) & (height^(crgt) i= rht)) & avl^(crgt)) & (cky lt-set keys^(crgt))))) &
	 ((rht <= (lht + 2)) & (lht <= (rht + 2)))) & 
	((((crgt l= nil) | ((crgt |-> loc left: rgtlft; loc right: rgtrgt) * ((height^(rgtlft) i= rlht) * (height^(rgtrgt) i= rrht)))) *
	((clft l= nil) | ((clft |-> loc left: lftlft; loc right: lftrgt) * ((height^(lftlft) i= llht) * (height^(lftrgt) i= lrht))))) * true) );

post: ((avl^(ret) & (keys^(ret) s= ((singleton cky) union (lks union rks)))) & 
	  (((((rht i= (lht + 1)) & (height^(ret) i= (rht + 1))) |
	   ((lht i= (rht + 1)) & (height^(ret) i= (lht + 1)))) |
	   ((lht i= rht) & (height^(ret) i= (lht + 1)))) |
	  (((((rht i= (lht + 2)) & (rlht i= rrht)) & (height^(ret) i= (rht + 1))) | (((rht i= (lht + 2)) & (~ (rlht i= rrht))) & (height^(ret) i= rht))) |
	  ((((lht i= (rht + 2)) & (llht i= lrht)) & (height^(ret) i= (lht + 1))) | (((lht i= (rht + 2)) & (~ (llht i= lrht))) & (height^(ret) i= lht)))))
	  ) ;
{
	assume (lht i== rht + 2);
	assume (llht < lrht);
	loc xlrl := lftrgt.left;
	loc xlrr := lftrgt.right;
	int newxht := rht + 1;
	int x.hight := newxht;
	int newnewlht := llht + 1;
	int clft.hight := newnewlht;
	int retht := rht + 2;
	int lftrgt.hight := retht;
	loc x.left := xlrr;
	loc clft.right := xlrl;
	loc lftrgt.left := clft;
	loc lftrgt.right := x;
	loc ret := lftrgt;
}

bb no-rotate-right:
pre: ((
	((x |-> loc left: clft; loc right: crgt; int key: cky; int hight: chgt) *
     (((((keys^(clft) s= lks) & (height^(clft) i= lht)) & avl^(clft)) & (keys^(clft) set-lt cky)) *
     ((((keys^(crgt) s= rks) & (height^(crgt) i= rht)) & avl^(crgt)) & (cky lt-set keys^(crgt))))) &
	 ((rht <= (lht + 2)) & (lht <= (rht + 2)))) & 
	((((crgt l= nil) | ((crgt |-> loc left: rgtlft; loc right: rgtrgt) * ((height^(rgtlft) i= rlht) * (height^(rgtrgt) i= rrht)))) *
	((clft l= nil) | ((clft |-> loc left: lftlft; loc right: lftrgt) * ((height^(lftlft) i= llht) * (height^(lftrgt) i= lrht))))) * true) );

post: ((avl^(ret) & (keys^(ret) s= ((singleton cky) union (lks union rks)))) & 
	  (((((rht i= (lht + 1)) & (height^(ret) i= (rht + 1))) |
	   ((lht i= (rht + 1)) & (height^(ret) i= (lht + 1)))) |
	   ((lht i= rht) & (height^(ret) i= (lht + 1)))) |
	  (((((rht i= (lht + 2)) & (rlht i= rrht)) & (height^(ret) i= (rht + 1))) | (((rht i= (lht + 2)) & (~ (rlht i= rrht))) & (height^(ret) i= rht))) |
	  ((((lht i= (rht + 2)) & (llht i= lrht)) & (height^(ret) i= (lht + 1))) | (((lht i= (rht + 2)) & (~ (llht i= lrht))) & (height^(ret) i= lht)))))
	  ) ;
{
	assume ((! (lht i== rht + 2)) && (! (rht i== lht + 2)));
	assume (rht i== lht + 1);
	int newh := rht + 1;
	int x.hight := newh;
	loc ret := x;
}

bb no-rotate-left:
pre: ((
	((x |-> loc left: clft; loc right: crgt; int key: cky; int hight: chgt) *
     (((((keys^(clft) s= lks) & (height^(clft) i= lht)) & avl^(clft)) & (keys^(clft) set-lt cky)) *
     ((((keys^(crgt) s= rks) & (height^(crgt) i= rht)) & avl^(crgt)) & (cky lt-set keys^(crgt))))) &
	 ((rht <= (lht + 2)) & (lht <= (rht + 2)))) & 
	((((crgt l= nil) | ((crgt |-> loc left: rgtlft; loc right: rgtrgt) * ((height^(rgtlft) i= rlht) * (height^(rgtrgt) i= rrht)))) *
	((clft l= nil) | ((clft |-> loc left: lftlft; loc right: lftrgt) * ((height^(lftlft) i= llht) * (height^(lftrgt) i= lrht))))) * true) );

post: ((avl^(ret) & (keys^(ret) s= ((singleton cky) union (lks union rks)))) & 
	  (((((rht i= (lht + 1)) & (height^(ret) i= (rht + 1))) |
	   ((lht i= (rht + 1)) & (height^(ret) i= (lht + 1)))) |
	   ((lht i= rht) & (height^(ret) i= (lht + 1)))) |
	  (((((rht i= (lht + 2)) & (rlht i= rrht)) & (height^(ret) i= (rht + 1))) | (((rht i= (lht + 2)) & (~ (rlht i= rrht))) & (height^(ret) i= rht))) |
	  ((((lht i= (rht + 2)) & (llht i= lrht)) & (height^(ret) i= (lht + 1))) | (((lht i= (rht + 2)) & (~ (llht i= lrht))) & (height^(ret) i= lht)))))
	  ) ;
{
	assume ((! (lht i== rht + 2)) && (! (rht i== lht + 2)));
	assume (! (rht i== lht + 1));
	int newh := lht + 1;
	int x.hight := newh;
	loc ret := x;
}
