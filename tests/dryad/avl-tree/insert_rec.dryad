define pred avl^(x): 
  ( ((x l= nil) & emp) |
    (
        (x |-> loc left: lft; loc right: rgt; int key: ky; int hight: hgt) * 
        (
	 (
	  (avl^(lft) & (keys^(lft) set-lt ky)) *
	  (avl^(rgt) & (ky lt-set keys^(rgt)))
	 ) &
	 (
	  ((height^(lft) i= height^(rgt)) & ((hgt i= (height^(lft) + 1)) * true)) 	   |
	  ( ((height^(lft) i= (height^(rgt) + 1)) & ((hgt i= (height^(rgt) + 2)) * true) ) |
	  ((height^(rgt) i= (height^(lft) + 1)) & ((hgt i= (height^(lft) + 2)) * true) ) )
	)
       )
    )
  ) ;

define set-fun keys^(x):
  (case (x l= nil): emptyset;
   case ((x |-> loc left: lft; loc right: rgt; int key: ky; int hight: hgt) * true): 
   	((singleton ky) union (keys^(lft) union keys^(rgt)));
   default: emptyset
  ) ;

define int-fun height^(x):
  (case (x l= nil): 0;
   case (((x |-> loc left: lft; loc right: rgt; int key: ky; int hight: hgt) * true) &
	((height^(lft) < height^(rgt)) * true)): 
   	(height^(rgt) + 1);
   default: (height^(lft) + 1)
  ) ;

method avl-insert(loc x, int k)
requires: (((avl^(x) & (keys^(x) s= xks)) & (height^(x) i= h)) & (~ (k i-in xks))) ;
ensures: ((avl^(ret) & (keys^(ret) s= (xks union (singleton k)))) & 
         ((height^(ret) i= h) | (height^(ret) i= (h + 1))));

method avl-balance(loc x)
requires: ((
	((x |-> loc left: clft; loc right: crgt; int key: cky; int hight: chgt) *
     (((((keys^(clft) s= lks) & (height^(clft) i= lht)) & avl^(clft)) & (keys^(clft) set-lt cky)) *
     ((((keys^(crgt) s= rks) & (height^(crgt) i= rht)) & avl^(crgt)) & (cky lt-set keys^(crgt))))) &
	 ((rht <= (lht + 2)) & (lht <= (rht + 2)))) & 
	((((crgt l= nil) | ((crgt |-> loc left: rgtlft; loc right: rgtrgt) * ((height^(rgtlft) i= rlht) * (height^(rgtrgt) i= rrht)))) *
	((clft l= nil) | ((clft |-> loc left: lftlft; loc right: lftrgt) * ((height^(lftlft) i= llht) * (height^(lftrgt) i= lrht))))) * true) );

ensures: ((avl^(ret) & (keys^(ret) s= ((singleton cky) union (lks union rks)))) & 
	  (((((rht i= (lht + 1)) & (height^(ret) i= (rht + 1))) |
	   ((lht i= (rht + 1)) & (height^(ret) i= (lht + 1)))) |
	   ((lht i= rht) & (height^(ret) i= (lht + 1)))) |
	  (((((rht i= (lht + 2)) & (rlht i= rrht)) & (height^(ret) i= (rht + 1))) | (((rht i= (lht + 2)) & (~ (rlht i= rrht))) & (height^(ret) i= rht))) |
	  ((((lht i= (rht + 2)) & (llht i= lrht)) & (height^(ret) i= (lht + 1))) | (((lht i= (rht + 2)) & (~ (llht i= lrht))) & (height^(ret) i= lht)))))
	  ) ;


bb avl-insert-basic:
pre: (((avl^(x) & (keys^(x) s= xkss)) & (height^(x) i= hh)) & (~ (k i-in xkss))) ;
post: ((avl^(ret) & (keys^(ret) s= (xkss union (singleton k)))) & 
         ((height^(ret) i= hh) | (height^(ret) i= (hh + 1))));
{
	assume (x l== nil);
	malloc y;
	int y.key := k;
	int tmp := 1;
	int y.hight := tmp;
	loc ret := y;
}

bb avl-insert-left-pre:
pre: (((avl^(x) & (keys^(x) s= xkss)) & (height^(x) i= hh)) & (~ (k i-in xkss))) ;
post: ((avl^(xl) & (~ (k i-in keys^(xl)))) * true) ;
{
	assume (! (x l== nil));
	int xkey := x.key;
	assume (k < xkey);
	loc xl := x.left;
	loc xr := x.right;
}

bb avl-insert-right-pre:
pre: (((avl^(x) & (keys^(x) s= xkss)) & (height^(x) i= hh)) & (~ (k i-in xkss))) ;
post: ((avl^(xr) & (~ (k i-in keys^(xr)))) * true) ;
{
	assume (! (x l== nil));
	int xkey := x.key;
	assume (k < xkey);
	loc xl := x.left;
	loc xr := x.right;
}

bb avl-insert-left-right-pre:
pre: (((avl^(x) & (keys^(x) s= xkss)) & (height^(x) i= hh)) & (~ (k i-in xkss))) ;
post:  	(
	((x |-> loc left: newl; loc right: xr; int key: xk; int hight: xh) *
     (((avl^(newl) & (keys^(newl) set-lt xk)) *
     (avl^(xr) & (xk lt-set keys^(xr)))) &
	 ((height^(xr) <= (height^(newl) + 2)) & (height^(newl) <= (height^(xr) + 2)))))
	* true) ;
{
	assume (! (x l== nil));
	int xkey := x.key;
	assume (k < xkey);
	loc xl := x.left;
	loc xr := x.right;
	int xk := x.key;
	int xh := x.hight;
	loc newl := avl-insert(xl; k);
	loc x.left := newl;
}

bb avl-insert-right-left-pre:
pre: (((avl^(x) & (keys^(x) s= xkss)) & (height^(x) i= hh)) & (~ (k i-in xkss))) ;
post: 	(
	((x |-> loc left: xl; loc right: newr; int key: xk; int hight: xh) *
     (((avl^(xl) & (keys^(xl) set-lt xk)) *
     (avl^(newr) & (xk lt-set keys^(newr)))) &
	 ((height^(newr) <= (height^(xl) + 2)) & (height^(xl) <= (height^(newr) + 2)))))
	* true) ;
{
	assume (! (x l== nil));
	int xkey := x.key;
	assume (! (k < xkey));
	loc xl := x.left;
	loc xr := x.right;
	int xk := x.key;
	int xh := x.hight;
	loc newr := avl-insert(xr; k);
	loc x.right := newr;
}

bb avl-insert-right-left:
pre: (((avl^(x) & (keys^(x) s= xkss)) & (height^(x) i= hh)) & (~ (k i-in xkss))) ;
post: ((avl^(ret) & (keys^(ret) s= (xkss union (singleton k)))) & 
         ((height^(ret) i= hh) | (height^(ret) i= (hh + 1))));
{
	assume (! (x l== nil));
	int xkey := x.key;
	assume (! (k < xkey));
	loc xl := x.left;
	loc xr := x.right;
	int xk := x.key;
	int xh := x.hight;
	loc newr := avl-insert(xr; k);
	loc x.right := newr;
	loc ret := avl-balance(x);
}

bb avl-insert-left-right:
pre: (((avl^(x) & (keys^(x) s= xkss)) & (height^(x) i= hh)) & (~ (k i-in xkss))) ;
post: ((avl^(ret) & (keys^(ret) s= (xkss union (singleton k)))) & 
         ((height^(ret) i= hh) | (height^(ret) i= (hh + 1))));
{
	assume (! (x l== nil));
	int xkey := x.key;
	assume (k < xkey);
	loc xl := x.left;
	loc xr := x.right;
	int xk := x.key;
	int xh := x.hight;
	loc newl := avl-insert(xl; k);
	loc x.left := newl;
	loc ret := avl-balance(x);
}


