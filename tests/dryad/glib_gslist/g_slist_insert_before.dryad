define pred list^(x): 
  ( 
	((x l= nil) & emp) | 
          ((x |-> loc next: nxt; int key: ky) * list^(nxt))
  ) ;
  
define set-fun keys^(x):
  (case (x l= nil): emptyset;
   case ((x |-> loc next: nxt; int key: ky) * true): 
   	((singleton ky) union keys^(nxt));
   default: emptyset
  ) ;

define relation lseg^(head, tail): 
  ( 
	(((head l= tail) | ((head l= nil) & (tail l= nil))) & emp) | 
          ((head |-> loc next: nxt; int key: ky) * lseg^(nxt, tail))  
  ) 
axiom: ( 
			(list^(tail) -* (list^(head) & (keys^(head) s= (lseg-keys^(head, tail) union keys^(tail))))) &
			(((tail |-> loc next: virtual tn; int key: virtual tk) * list^(tn)) -* ((lseg^(head, tn) & (lseg-keys^(head, tn) s= (lseg-keys^(head, tail) union (singleton tk)))) * list^(tn))) 
	   ) ;

define bin-set-fun lseg-keys^(head, tail):
  (case ((head l= tail) | ((head l= nil) & (tail l= nil))) : emptyset;
   case ((head |-> loc next: nxt; int key: ky) * true): 
   	((singleton ky) union lseg-keys^(nxt, tail));
   default: emptyset
  ) ;


bb insert-nil:
pre: ((lseg^(x, sibling) * list^(sibling)) & ((kk s= keys^(x)) & (x l= oldx)));
post: ((keys^(ret) s= (kk union (singleton d))) & (((oldx l= nil) => ((ret |-> loc next: temp; int key: d) & (temp l= nil))) &
												   ((~ (oldx l= nil)) => ((lseg^(ret, newx) * (newx |-> loc next: sibling; int key: d)) * list^(sibling)))));
{
	assume (x l== nil);
	malloc x;
	int x.key := d;
	loc temp := nil;
	loc x.next := temp;
	loc ret := x; 
}


bb insert-non-nil-loop-pre:
pre: ((lseg^(x, sibling) * list^(sibling)) & ((kk s= keys^(x)) & (x l= oldx)));
post: (((keys^(x) s= kk) & (~ (oldx l= nil))) &
		  ((((last l= nil) & (x l= node)) | (lseg^(x, last) * (last |-> loc next: node; int key: kl))) * (lseg^(node, sibling) * list^(sibling))));
{
	assume (! (x l== nil));
	loc last := nil;
	loc node := x;
}

bb insert-non-nil-loop-inductive:
pre: (((keys^(x) s= kk) & (~ (oldx l= nil))) &
		  ((((last l= nil) & (x l= node)) | (lseg^(x, last) * (last |-> loc next: node; int key: kl))) * (lseg^(node, sibling) * list^(sibling))));
post: (((keys^(x) s= kk) & (~ (oldx l= nil))) &
		  ((((last l= nil) & (x l= node)) | (lseg^(x, last) * (last |-> loc next: node; int key: kl))) * (lseg^(node, sibling) * list^(sibling))));
{
	assume (! (node l== nil));
	assume (! (node l== sibling));
	loc last := node;
	loc node := last.next;
	int kl := last.key;
}

bb insert-non-nil-loop-post1:
pre: (((keys^(x) s= kk) & (~ (oldx l= nil))) &
		  ((((last l= nil) & (x l= node)) | (lseg^(x, last) * (last |-> loc next: node; int key: kl))) * (lseg^(node, sibling) * list^(sibling))));
post: ((keys^(ret) s= (kk union (singleton d))) & (((oldx l= nil) => ((ret |-> loc next: temp; int key: d) & (temp l= nil))) &
												   ((~ (oldx l= nil)) => ((lseg^(ret, newx) * (newx |-> loc next: sibling; int key: d)) * list^(sibling)))));
{
	assume ((node l== nil) || (node l== sibling));
	assume (last l== nil);
	malloc node;
	int node.key := d;
	loc node.next := x;
	loc ret := node;
}


bb insert-non-nil-loop-post2:
pre: (((keys^(x) s= kk) & (~ (oldx l= nil))) &
		  ((((last l= nil) & (x l= node)) | (lseg^(x, last) * (last |-> loc next: node; int key: kl))) * (lseg^(node, sibling) * list^(sibling))));
post: ((keys^(ret) s= (kk union (singleton d))) & (((oldx l= nil) => ((ret |-> loc next: temp; int key: d) & (temp l= nil))) &
												   ((~ (oldx l= nil)) => ((lseg^(ret, newx) * (newx |-> loc next: sibling; int key: d)) * list^(sibling)))));
{
	assume ((node l== nil) || (node l== sibling));
	assume (! (last l== nil));
	malloc node;
	int node.key := d;
	loc tmp := last.next;
	loc node.next := tmp;
	loc last.next := node;
	loc ret := x;
}