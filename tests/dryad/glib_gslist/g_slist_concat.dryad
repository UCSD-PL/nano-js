define pred list^(x): 
  ( 
	((x l= nil) & emp) | 
          ((x |-> loc next: nxt; int key: ky) * list^(nxt))
  ) ;
  
define set-fun keys^(x):
  (case (x l= nil): emptyset;
   case ((x |-> loc next: nxt; int key: ky) * true): 
   	((singleton ky) union keys^(nxt));
   default: emptyset
  ) ;

define relation lseg^(head, tail): 
  ( 
	(((head l= tail) | ((head l= nil) & (tail l= nil))) & emp) | 
          ((head |-> loc next: nxt; int key: ky) * lseg^(nxt, tail))  
  ) 
axiom: ( 
			(list^(tail) -* (list^(head) & (keys^(head) s= (lseg-keys^(head, tail) union keys^(tail))))) &
			(((tail |-> loc next: virtual tn; int key: virtual tk) * list^(tn)) -* ((lseg^(head, tn) & (lseg-keys^(head, tn) s= (lseg-keys^(head, tail) union (singleton tk)))) * list^(tn))) 
	   ) ;

define bin-set-fun lseg-keys^(head, tail):
  (case ((head l= tail) | ((head l= nil) & (tail l= nil))) : emptyset;
   case ((head |-> loc next: nxt; int key: ky) * true): 
   	((singleton ky) union lseg-keys^(nxt, tail));
   default: emptyset
  ) ;


	   
method gslistlast(loc xt)
requires: ((list^(xt) & (kk s= keys^(xt))) & (oldx l= xt));
ensures: (((kk s= keys^(xt)) & (xt l= oldx)) & (((oldx l= nil) => (ret l= nil)) &
											    ((~ (oldx l= nil)) => (lseg^(xt, ret) * ((ret |-> loc next: temp; int key: kx) & (temp l= nil))))));


bb concat-x2-nil:
pre: ((list^(x1) * list^(x2)) & ((ks1 s= keys^(x1)) & (ks2 s= keys^(x2))));
post: (list^(ret) & (keys^(ret) s= (ks1 union ks2)));
{
	assume (x2 l== nil);
	loc ret := x1;
}

bb concat-x2-non-nil:
pre: ((list^(x1) * list^(x2)) & ((ks1 s= keys^(x1)) & (ks2 s= keys^(x2))));
post: (list^(ret) & (keys^(ret) s= (ks1 union ks2)));
{
	assume (! (x2 l== nil));
	assume (x1 l== nil);
	loc x1 := x2;
	loc ret := x1;
}

bb concat-x1-non-nil-last-pre:
pre: ((list^(x1) * list^(x2)) & ((ks1 s= keys^(x1)) & (ks2 s= keys^(x2))));
post: (list^(x1) & (ks1 s= keys^(x1))) ;
{
	assume (! (x2 l== nil));
	assume (! (x1 l== nil));
}

bb concat-x1-non-nil:
pre: ((list^(x1) * list^(x2)) & ((ks1 s= keys^(x1)) & (ks2 s= keys^(x2))));
post: (list^(ret) & (keys^(ret) s= (ks1 union ks2)));
{
	assume (! (x2 l== nil));
	assume (! (x1 l== nil));
	loc last := gslistlast(x1);
	loc last.next := x2;
	loc ret := x1;
}
