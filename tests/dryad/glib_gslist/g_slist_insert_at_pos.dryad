define pred list^(x): 
  ( 
	((x l= nil) & emp) | 
          ((x |-> loc next: nxt; int key: ky) * list^(nxt))
  )
  axiom: (lseg^(x, x) * (((x l= nil) & (length^(x) i= 0)) | ((~ (x l= nil)) & (0 < length^(x)))));
  

define set-fun keys^(x):
  (case (x l= nil): emptyset;
   case ((x |-> loc next: nxt; int key: ky) * true): 
   	((singleton ky) union keys^(nxt));
   default: emptyset
  ) ;

define int-fun length^(x):
  (case (x l= nil): 0;
   case ((x |-> loc next: nxt; int key: ky) * true): 
   	(1 + length^(nxt));
   default: 0
  ) ;

define relation lseg^(head, tail): 
  ( 
	(((head l= tail) | ((head l= nil) & (tail l= nil))) & emp) | 
          ((head |-> loc next: nxt; int key: ky) * lseg^(nxt, tail))  
  ) 
axiom: ( 
			((((head l= tail) => (emp & ((lseg-length^(head, tail) i= 0) & (lseg-keys^(head, tail) s= emptyset)))) &
			((tail l= nil) => (list^(head) & ((length^(head) i= lseg-length^(head, tail)) & (keys^(head) s= lseg-keys^(head, tail)))))) &
			(list^(tail) -* (list^(head) & ((keys^(head) s= (lseg-keys^(head, tail) union keys^(tail))) & (length^(head) i= (lseg-length^(head, tail) + length^(tail))))))) &
			(((tail |-> loc next: virtual tn; int key: virtual tk) * list^(tn)) -* ((lseg^(head, tn) & ((lseg-keys^(head, tn) s= (lseg-keys^(head, tail) union (singleton tk))) & (lseg-length^(head, tn) i= (lseg-length^(head, tail) + 1))) ) * list^(tn)))
	   ) ;

define bin-set-fun lseg-keys^(head, tail):
  (case ((head l= tail) | ((head l= nil) & (tail l= nil))) : emptyset;
   case ((head |-> loc next: nxt; int key: ky) * true): 
   	((singleton ky) union lseg-keys^(nxt, tail));
   default: emptyset
  ) ;

define bin-int-fun lseg-length^(head, tail):
  (case (head l= tail) : 0;
   case ((head |-> loc next: nxt; int key: ky) * true): 
   	(1 + lseg-length^(nxt, tail));
   default: 0
  ) ;


method gslistprepend(loc x, int d)
requires: ((list^(x) & (kk s= keys^(x))) & (x l= oldx)) ;
ensures: (list^(ret) & ((ret l= newx) & (((ret |-> loc next: oldx; int key: d) * list^(oldx)) & (keys^(ret) s= (kk union (singleton d))))));

method gslistappend(loc x, int d)
requires: (list^(x) & (x l= oldx));
ensures: (list^(ret) & (((oldx l= nil) => (((ret l= newx) & (ret |-> loc next: tmp; int key: d)) & (tmp l= nil))) &
												  ((~ (oldx l= nil)) => (lseg^(ret, newx) * ((newx |-> loc next: tmp; int key: d) & (tmp l= nil))))));


bb insert-post1-pre:
pre: (((list^(x) & (x l= oldx)) & (length^(x) i= len)) & (pos i= oldpos));
post: list^(x);
{
	assume (pos < 0);
}

bb insert-post1:
pre: (((list^(x) & (x l= oldx)) & (length^(x) i= len)) & (pos i= oldpos));
post: (list^(ret) & ((((len < oldpos) | (oldpos < 0)) => (lseg^(ret, newx) * ((newx |-> loc next: tmp; int key: d) & (tmp l= nil)))) &
	                 (((0 <= oldpos) & (oldpos <= len)) => (((lseg^(ret, newx) & (lseg-length^(ret, newx) i= oldpos)) * list^(newx)) & ((newx |-> int key: d) * true)))));
{
	assume (pos < 0);
	loc ret := gslistappend(x, d);
}


bb insert-post2-pre:
pre: ((((list^(x) & (x l= oldx)) & (length^(x) i= len)) & (pos i= oldpos)) & (0 < len));
post: list^(x);
{
	assume (0 <= pos);
	assume (pos i== 0);
}

bb insert-post2:
pre: ((((list^(x) & (x l= oldx)) & (length^(x) i= len)) & (pos i= oldpos)) & (0 < len));
post: (list^(ret) & ((((len < oldpos) | (oldpos < 0)) => (lseg^(ret, newx) * ((newx |-> loc next: tmp; int key: d) & (tmp l= nil)))) &
	                 (((0 <= oldpos) & (oldpos <= len)) => (((lseg^(ret, newx) & (lseg-length^(ret, newx) i= oldpos)) * list^(newx)) & ((newx |-> int key: d) * true)))));
{
	assume (0 <= pos);
	assume (pos i== 0);
	loc ret := gslistprepend(x, d);
}

bb insert-loop-pre:
pre: (((list^(x) & (x l= oldx)) & (length^(x) i= len)) & (pos i= oldpos));
post: ( (((newx |-> loc next: temp; int key: d) & (temp l= nil)) * ((((list^(oldx) & (x l= oldx)) & (~ (oldx l= nil))) & (((0 < oldpos) & (0 <= pos)) & (len i= length^(oldx)))) &
		  ((((prev l= nil) & (tmp l= oldx)) & (lseg^(oldx, tmp) & ((lseg-length^(x, tmp) + pos) i= oldpos))) * list^(tmp)))) |
	    (((newx |-> loc next: temp; int key: d) & (temp l= nil)) * ((((list^(oldx) & (x l= oldx)) & (~ (oldx l= nil))) & (((0 < oldpos) & (0 <= pos)) & (len i= length^(oldx)))) &
		  (((lseg^(oldx, prev) * (prev |-> loc next: tmp)) & (lseg^(oldx, tmp) & ((lseg-length^(x, tmp) + pos) i= oldpos))) * list^(tmp))))
	  );
{
	assume (0 <= pos);
	assume (! (pos i== 0));
	malloc newx;
	loc temp := nil;
	loc newx.next := temp;
	int newx.key := d;
	assume (! (x l== nil));
	loc prev := nil;
	loc tmp := x;
}


bb insert-loop-inductive:
pre: ( (((newx |-> loc next: temp; int key: d) & (temp l= nil)) * ((((list^(oldx) & (x l= oldx)) & (~ (oldx l= nil))) & (((0 < oldpos) & (0 <= pos)) & (len i= length^(oldx)))) &
		  ((((prev l= nil) & (tmp l= oldx)) & (lseg^(oldx, tmp) & ((lseg-length^(x, tmp) + pos) i= oldpos))) * list^(tmp)))) |
	    (((newx |-> loc next: temp; int key: d) & (temp l= nil)) * ((((list^(oldx) & (x l= oldx)) & (~ (oldx l= nil))) & (((0 < oldpos) & (0 <= pos)) & (len i= length^(oldx)))) &
		  (((lseg^(oldx, prev) * (prev |-> loc next: tmp)) & (lseg^(oldx, tmp) & ((lseg-length^(x, tmp) + pos) i= oldpos))) * list^(tmp))))
	  );
post: ( (((newx |-> loc next: temp; int key: d) & (temp l= nil)) * ((((list^(oldx) & (x l= oldx)) & (~ (oldx l= nil))) & (((0 < oldpos) & (0 <= pos)) & (len i= length^(oldx)))) &
		  ((((prev l= nil) & (tmp l= oldx)) & (lseg^(oldx, tmp) & ((lseg-length^(x, tmp) + pos) i= oldpos))) * list^(tmp)))) |
	    (((newx |-> loc next: temp; int key: d) & (temp l= nil)) * ((((list^(oldx) & (x l= oldx)) & (~ (oldx l= nil))) & (((0 < oldpos) & (0 <= pos)) & (len i= length^(oldx)))) &
		  (((lseg^(oldx, prev) * (prev |-> loc next: tmp)) & (lseg^(oldx, tmp) & ((lseg-length^(x, tmp) + pos) i= oldpos))) * list^(tmp))))
	  );
{
	assume ((0 < pos) && (! (tmp l== nil)));
	int pos1 := pos - 1;
	int pos := pos1;
	loc prev := tmp;
	loc tmp := prev.next;
}

bb insert-post3:
pre: (((list^(x) & (x l= oldx)) & (length^(x) i= len)) & (pos i= oldpos));
post: (list^(ret) & ((((len < oldpos) | (oldpos < 0)) => (lseg^(ret, newx) * ((newx |-> loc next: temp; int key: d) & (temp l= nil)))) &
	                 (((0 <= oldpos) & (oldpos <= len)) => (((lseg^(ret, newx) & (lseg-length^(ret, newx) i= oldpos)) * list^(newx)) & ((newx |-> int key: d) * true)))));
{
	assume (0 <= pos);
	assume (! (pos i== 0));
	malloc newx;
	loc temp := nil;
	loc newx.next := temp;
	int newx.key := d;
	assume (x l== nil);
	loc ret := newx;
}


bb insert-loop-post4:
pre: ( (((newx |-> loc next: temp; int key: d) & (temp l= nil)) * ((((list^(oldx) & (x l= oldx)) & (~ (oldx l= nil))) & (((0 < oldpos) & (0 <= pos)) & (len i= length^(oldx)))) &
		  ((((prev l= nil) & (tmp l= oldx)) & (lseg^(oldx, tmp) & ((lseg-length^(x, tmp) + pos) i= oldpos))) * list^(tmp)))) |
	    (((newx |-> loc next: temp; int key: d) & (temp l= nil)) * ((((list^(oldx) & (x l= oldx)) & (~ (oldx l= nil))) & (((0 < oldpos) & (0 <= pos)) & (len i= length^(oldx)))) &
		  (((lseg^(oldx, prev) * (prev |-> loc next: tmp)) & (lseg^(oldx, tmp) & ((lseg-length^(x, tmp) + pos) i= oldpos))) * list^(tmp))))
	  );
post: (list^(ret) & ((((len < oldpos) | (oldpos < 0)) => (lseg^(ret, newx) * ((newx |-> loc next: tmp; int key: d) & (tmp l= nil)))) &
	                 (((0 <= oldpos) & (oldpos <= len)) => (((lseg^(ret, newx) & (lseg-length^(ret, newx) i= oldpos)) * list^(newx)) & ((newx |-> int key: d) * true)))));
{
	assume ((pos <= 0) || (tmp l== nil));
	assume (prev l== nil);
	loc newx.next := x;
	loc x := newx;
	loc ret := x;
}

bb insert-loop-post5:
pre: ( (((newx |-> loc next: temp; int key: d) & (temp l= nil)) * ((((list^(oldx) & (x l= oldx)) & (~ (oldx l= nil))) & (((0 < oldpos) & (0 <= pos)) & (len i= length^(oldx)))) &
		  ((((prev l= nil) & (tmp l= oldx)) & (lseg^(oldx, tmp) & ((lseg-length^(x, tmp) + pos) i= oldpos))) * list^(tmp)))) |
	    (((newx |-> loc next: temp; int key: d) & (temp l= nil)) * ((((list^(oldx) & (x l= oldx)) & (~ (oldx l= nil))) & (((0 < oldpos) & (0 <= pos)) & (len i= length^(oldx)))) &
		  (((lseg^(oldx, prev) * (prev |-> loc next: tmp)) & (lseg^(oldx, tmp) & ((lseg-length^(x, tmp) + pos) i= oldpos))) * list^(tmp))))
	  );
post: (list^(ret) & ((((len < oldpos) | (oldpos < 0)) => (lseg^(ret, newx) * ((newx |-> loc next: tmp; int key: d) & (tmp l= nil)))) &
	                 (((0 <= oldpos) & (oldpos <= len)) => (((lseg^(ret, newx) & (lseg-length^(ret, newx) i= oldpos)) * list^(newx)) & ((newx |-> int key: d) * true)))));
{
	assume ((pos <= 0) || (tmp l== nil));
	assume (! (prev l== nil));
	loc newx.next := tmp;
	loc prev.next := newx;
	loc ret := x;
}
