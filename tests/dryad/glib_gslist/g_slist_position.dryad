define pred list^(x): 
  ( 
	((x l= nil) & emp) | 
          ((x |-> loc next: nxt; int key: ky) * list^(nxt))
  )
  axiom: (lseg^(x, x) * (((x l= nil) & (length^(x) i= 0)) | ((~ (x l= nil)) & (0 < length^(x)))));
  

define set-fun keys^(x):
  (case (x l= nil): emptyset;
   case ((x |-> loc next: nxt; int key: ky) * true): 
   	((singleton ky) union keys^(nxt));
   default: emptyset
  ) ;

define int-fun length^(x):
  (case (x l= nil): 0;
   case ((x |-> loc next: nxt; int key: ky) * true): 
   	(1 + length^(nxt));
   default: 0
  ) ;

define relation lseg^(head, tail): 
  ( 
	(((head l= tail) | ((head l= nil) & (tail l= nil))) & emp) | 
          ((head |-> loc next: nxt; int key: ky) * lseg^(nxt, tail))  
  ) 
axiom: ( 
			((((head l= tail) => (emp & ((lseg-length^(head, tail) i= 0) & (lseg-keys^(head, tail) s= emptyset)))) &
			((tail l= nil) => (list^(head) & ((length^(head) i= lseg-length^(head, tail)) & (keys^(head) s= lseg-keys^(head, tail)))))) &
			(list^(tail) -* (list^(head) & ((keys^(head) s= (lseg-keys^(head, tail) union keys^(tail))) & (length^(head) i= (lseg-length^(head, tail) + length^(tail))))))) &
			(((tail |-> loc next: virtual tn; int key: virtual tk) * list^(tn)) -* ((lseg^(head, tn) & ((lseg-keys^(head, tn) s= (lseg-keys^(head, tail) union (singleton tk))) & (lseg-length^(head, tn) i= (lseg-length^(head, tail) + 1))) ) * list^(tn)))
	   ) ;

define bin-set-fun lseg-keys^(head, tail):
  (case ((head l= tail) | ((head l= nil) & (tail l= nil))) : emptyset;
   case ((head |-> loc next: nxt; int key: ky) * true): 
   	((singleton ky) union lseg-keys^(nxt, tail));
   default: emptyset
  ) ;

define bin-int-fun lseg-length^(head, tail):
  (case (head l= tail) : 0;
   case ((head |-> loc next: nxt; int key: ky) * true): 
   	(1 + lseg-length^(nxt, tail));
   default: 0
  ) ;


bb position-before-loop:
pre: ((list^(x) & (lseg^(x, llink) * list^(llink))) & (oldx l= x));
post: (list^(oldx) & (((lseg^(oldx, x) & (lseg-length^(oldx, x) i= i)) * lseg^(x, llink)) * list^(llink)));
{
	int i := 0;
	loc tmp := nil;
}

bb position-in-loop:
pre: (list^(oldx) & (((lseg^(oldx, x) & (lseg-length^(oldx, x) i= i)) * lseg^(x, llink)) * list^(llink)));
post: (list^(oldx) & (((lseg^(oldx, x) & (lseg-length^(oldx, x) i= i)) * lseg^(x, llink)) * list^(llink)));
{
	assume (! (x l== nil));
	assume (! (x l== llink));
	int i1 := i + 1;
	int i := i1;
	loc tmp := x.next;
	loc x := tmp;
	loc tmp := nil;
}

bb position-after-loop1:
pre: (list^(oldx) & (((lseg^(oldx, x) & (lseg-length^(oldx, x) i= i)) * lseg^(x, llink)) * list^(llink)));
post: (list^(oldx) & ((((lseg^(oldx, llink) & (lseg-length^(oldx, llink) i= ret)) * list^(llink)) & (~ (llink l= nil))) | ((ret i= -1) & (llink l= nil))));
{
	assume (x l== nil);
	int ret := -1;
}

bb position-after-loop2:
pre: (list^(oldx) & (((lseg^(oldx, x) & (lseg-length^(oldx, x) i= i)) * lseg^(x, llink)) * list^(llink)));
post: (list^(oldx) & ((((lseg^(oldx, llink) & (lseg-length^(oldx, llink) i= ret)) * list^(llink)) & (~ (llink l= nil))) | ((ret i= -1) & (llink l= nil))));
{
	assume (! (x l== nil));
	assume (x l== llink);
	int ret := i;
}