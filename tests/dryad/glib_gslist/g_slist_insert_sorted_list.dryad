define pred list^(x): 
  ( 
	((x l= nil) & emp) | 
          ((x |-> loc next: nxt; int key: ky) * list^(nxt))
  )
  axiom: (lseg^(x, x) * (((x l= nil) & (length^(x) i= 0)) | ((~ (x l= nil)) & (0 < length^(x)))));
  
define pred sorted-list^(x): 
  ( 
	((x l= nil) & emp) | 
          ((x |-> loc next: nxt; int key: ky) * (sorted-list^(nxt) & (ky lt-set keys^(nxt))))  
  )
axiom: ((list^(x) & (sorted-lseg^(x, x) * (((x l= nil) & (length^(x) i= 0)) | ((~ (x l= nil)) & (0 < length^(x)))))) &
	    (((x |-> int key: tk) * true) => (tk lt-set keys^(x)))
	   );

define set-fun keys^(x):
  (case (x l= nil): emptyset;
   case ((x |-> loc next: nxt; int key: ky) * true): 
   	((singleton ky) union keys^(nxt));
   default: emptyset
  ) ;

define int-fun length^(x):
  (case (x l= nil): 0;
   case ((x |-> loc next: nxt; int key: ky) * true): 
   	(1 + length^(nxt));
   default: 0
  ) ;

define relation lseg^(head, tail): 
  ( 
	(((head l= tail) | ((head l= nil) & (tail l= nil))) & emp) | 
          ((head |-> loc next: nxt; int key: ky) * lseg^(nxt, tail))  
  ) 
axiom: ( 
			((((head l= tail) => (emp & ((lseg-length^(head, tail) i= 0) & (lseg-keys^(head, tail) s= emptyset)))) &
			((tail l= nil) => (list^(head) & ((length^(head) i= lseg-length^(head, tail)) & (keys^(head) s= lseg-keys^(head, tail)))))) &
			(list^(tail) -* (list^(head) & ((keys^(head) s= (lseg-keys^(head, tail) union keys^(tail))) & (length^(head) i= (lseg-length^(head, tail) + length^(tail))))))) &
			(((tail |-> loc next: virtual tn; int key: virtual tk) * list^(tn)) -* ((lseg^(head, tn) & ((lseg-keys^(head, tn) s= (lseg-keys^(head, tail) union (singleton tk))) & (lseg-length^(head, tn) i= (lseg-length^(head, tail) + 1))) ) * list^(tn)))
	   ) ;

define relation sorted-lseg^(head, tail): 
  ( 
	(((head l= tail) | ((head l= nil) & (tail l= nil))) & emp) | 
          ((head |-> loc next: nxt; int key: ky) * (sorted-lseg^(nxt, tail) & (ky lt-set lseg-keys^(nxt, tail))))  
  ) 
axiom: ( 
			((((head l= tail) => (emp & ((lseg-length^(head, tail) i= 0) & (lseg-keys^(head, tail) s= emptyset)))) &
			((tail l= nil) => (sorted-list^(head) & ((length^(head) i= lseg-length^(head, tail)) & (keys^(head) s= lseg-keys^(head, tail)))))) &
			(sorted-list^(tail) -* ((lseg-keys^(head, tail) le keys^(tail)) => (sorted-list^(head) & ((keys^(head) s= (lseg-keys^(head, tail) union keys^(tail))) & (length^(head) i= (lseg-length^(head, tail) + length^(tail)))))))) &
			(((tail |-> loc next: virtual tn; int key: virtual tk) * list^(tn)) -* (((lseg-keys^(head, tail) set-lt tk) => (sorted-lseg^(head, tn) & ((lseg-keys^(head, tn) s= (lseg-keys^(head, tail) union (singleton tk))) & (lseg-length^(head, tn) i= (lseg-length^(head, tail) + 1))) )) * list^(tn)))
	   ) ;

define bin-set-fun lseg-keys^(head, tail):
  (case ((head l= tail) | ((head l= nil) & (tail l= nil))) : emptyset;
   case ((head |-> loc next: nxt; int key: ky) * true): 
   	((singleton ky) union lseg-keys^(nxt, tail));
   default: emptyset
  ) ;

define bin-int-fun lseg-length^(head, tail):
  (case (head l= tail) : 0;
   case ((head |-> loc next: nxt; int key: ky) * true): 
   	(1 + lseg-length^(nxt, tail));
   default: 0
  ) ;


bb insert-sorted-post1:
pre: (sorted-list^(x) & (kk s= keys^(x)));
post: (sorted-list^(ret) & (keys^(ret) s= (kk union (singleton d))));
{
	loc tmp := x;
	loc prev := nil;
	loc tmpnext := nil;
	assume (x l== nil);
	malloc newx;
	int newx.key := d;
	loc nill := nil;
	loc newx.next := nill;
	loc ret := newx;
}

bb insert-sorted-loop-pre:
pre: (sorted-list^(x) & (kk s= keys^(x)));
post: (((~ (x l= nil)) & (cmp i= (d - tk))) &
			((keys^(x) s= kk) & ((sorted-list^(x) & ((sorted-lseg^(x, tmp) & ((lseg-keys^(x, tmp) set-lt d) & (lseg-keys^(x, tmp) set-lt tk))) * (sorted-list^(tmp) & ((tmp |-> loc next: tmpnext; int key: tk) * sorted-list^(tmpnext))))) &
			                    (((prev l= nil) & (tmp l= x)) | ((((sorted-lseg^(x, prev) & (lseg-keys^(x, prev) set-lt tp)) * (prev |-> loc next: tmp; int key: tp)) & sorted-lseg^(x, tmp)) * true)))));
{
	loc tmp := x;
	loc prev := nil;
	loc tmpnext := nil;
	assume (! (x l== nil));
	int tk := x.key;
	int cmp := d - tk;
	loc tmpnext := tmp.next;
}

bb insert-sorted-loop-inductive:
pre: (((~ (x l= nil)) & (cmp i= (d - tk))) &
			((keys^(x) s= kk) & ((sorted-list^(x) & ((sorted-lseg^(x, tmp) & ((lseg-keys^(x, tmp) set-lt d) & (lseg-keys^(x, tmp) set-lt tk))) * (sorted-list^(tmp) & ((tmp |-> loc next: tmpnext; int key: tk) * sorted-list^(tmpnext))))) &
			                    (((prev l= nil) & (tmp l= x)) | ((((sorted-lseg^(x, prev) & (lseg-keys^(x, prev) set-lt tp)) * (prev |-> loc next: tmp; int key: tp)) & sorted-lseg^(x, tmp)) * true)))));
post: (((~ (x l= nil)) & (cmp i= (d - tk))) &
			((keys^(x) s= kk) & ((sorted-list^(x) & ((sorted-lseg^(x, tmp) & ((lseg-keys^(x, tmp) set-lt d) & (lseg-keys^(x, tmp) set-lt tk))) * (sorted-list^(tmp) & ((tmp |-> loc next: tmpnext; int key: tk) * sorted-list^(tmpnext))))) &
			                    (((prev l= nil) & (tmp l= x)) | ((((sorted-lseg^(x, prev) & (lseg-keys^(x, prev) set-lt tp)) * (prev |-> loc next: tmp; int key: tp)) & sorted-lseg^(x, tmp)) * true)))));
{
	assume ((!(tmpnext l== nil)) && (0 < cmp));
	loc prev := tmp;
	int tp := prev.key;
	loc tmp := prev.next;
	loc tmpnext := tmp.next;
	int tk := tmp.key;
	int cmp := d - tk;
}

bb insert-sorted-post2:
pre: (((~ (x l= nil)) & (cmp i= (d - tk))) &
			((keys^(x) s= kk) & ((sorted-list^(x) & ((sorted-lseg^(x, tmp) & ((lseg-keys^(x, tmp) set-lt d) & (lseg-keys^(x, tmp) set-lt tk))) * (sorted-list^(tmp) & ((tmp |-> loc next: tmpnext; int key: tk) * sorted-list^(tmpnext))))) &
			                    (((prev l= nil) & (tmp l= x)) | ((((sorted-lseg^(x, prev) & (lseg-keys^(x, prev) set-lt tp)) * (prev |-> loc next: tmp; int key: tp)) & sorted-lseg^(x, tmp)) * true)))));
post: (sorted-list^(ret) & (keys^(ret) s= (kk union (singleton d))));
{
	assume ((tmpnext l== nil) || (cmp <= 0));
	malloc newx;
	loc nill := nil;
	loc newx.next := nill;
	int newx.key := d;
	loc tmpnext := tmp.next;
	assume ((tmpnext l== nil) && (0 < cmp));
	loc tmp.next := newx;
	loc ret := x;
}

bb insert-sorted-post3:
pre: (((~ (x l= nil)) & (cmp i= (d - tk))) &
			((keys^(x) s= kk) & ((sorted-list^(x) & ((sorted-lseg^(x, tmp) & ((lseg-keys^(x, tmp) set-lt d) & (lseg-keys^(x, tmp) set-lt tk))) * (sorted-list^(tmp) & ((tmp |-> loc next: tmpnext; int key: tk) * sorted-list^(tmpnext))))) &
			                    (((prev l= nil) & (tmp l= x)) | ((((sorted-lseg^(x, prev) & (lseg-keys^(x, prev) set-lt tp)) * (prev |-> loc next: tmp; int key: tp)) & sorted-lseg^(x, tmp)) * true)))));
post: (sorted-list^(ret) & (keys^(ret) s= (kk union (singleton d))));
{
	assume ((tmpnext l== nil) || (cmp <= 0));
	malloc newx;
	loc nill := nil;
	loc newx.next := nill;
	int newx.key := d;
	loc tmpnext := tmp.next;
	assume ((! (tmpnext l== nil)) || (cmp <= 0));
	assume (prev l== nil);
	loc newx.next := x;
	loc ret := newx;
}

bb insert-sorted-post4:
pre: (((~ (x l= nil)) & (cmp i= (d - tk))) &
			((keys^(x) s= kk) & ((sorted-list^(x) & ((sorted-lseg^(x, tmp) & ((lseg-keys^(x, tmp) set-lt d) & (lseg-keys^(x, tmp) set-lt tk))) * (sorted-list^(tmp) & ((tmp |-> loc next: tmpnext; int key: tk) * sorted-list^(tmpnext))))) &
			                    (((prev l= nil) & (tmp l= x)) | ((((sorted-lseg^(x, prev) & (lseg-keys^(x, prev) set-lt tp)) * (prev |-> loc next: tmp; int key: tp)) & sorted-lseg^(x, tmp)) * true)))));
post: (sorted-list^(ret) & (keys^(ret) s= (kk union (singleton d))));
{
	assume ((tmpnext l== nil) || (cmp <= 0));
	malloc newx;
	loc nill := nil;
	loc newx.next := nill;
	int newx.key := d;
	loc tmpnext := tmp.next;
	assume ((! (tmpnext l== nil)) || (cmp <= 0));
	assume (! (prev l== nil));
	loc newx.next := tmp;
	loc prev.next := newx;
	loc ret := x;
}



