define pred list^(x): 
  ( 
	((x l= nil) & emp) | 
          ((x |-> loc next: nxt; int key: ky) * list^(nxt))
  )
  axiom: (lseg^(x, x) * (((x l= nil) & (length^(x) i= 0)) | ((~ (x l= nil)) & (0 < length^(x)))));
  
define pred sorted-list^(x): 
  ( 
	((x l= nil) & emp) | 
          ((x |-> loc next: nxt; int key: ky) * (sorted-list^(nxt) & (ky lt-set keys^(nxt))))  
  )
axiom: ((list^(x) & (sorted-lseg^(x, x) * (((x l= nil) & (length^(x) i= 0)) | ((~ (x l= nil)) & (0 < length^(x)))))) &
	    (((x |-> int key: tk) * true) => (tk lt-set keys^(x)))
	   );

define set-fun keys^(x):
  (case (x l= nil): emptyset;
   case ((x |-> loc next: nxt; int key: ky) * true): 
   	((singleton ky) union keys^(nxt));
   default: emptyset
  ) ;

define int-fun length^(x):
  (case (x l= nil): 0;
   case ((x |-> loc next: nxt; int key: ky) * true): 
   	(1 + length^(nxt));
   default: 0
  ) ;

define relation lseg^(head, tail): 
  ( 
	(((head l= tail) | ((head l= nil) & (tail l= nil))) & emp) | 
          ((head |-> loc next: nxt; int key: ky) * lseg^(nxt, tail))  
  ) 
axiom: ( 
			((((head l= tail) => (emp & ((lseg-length^(head, tail) i= 0) & (lseg-keys^(head, tail) s= emptyset)))) &
			((tail l= nil) => (list^(head) & ((length^(head) i= lseg-length^(head, tail)) & (keys^(head) s= lseg-keys^(head, tail)))))) &
			(list^(tail) -* (list^(head) & ((keys^(head) s= (lseg-keys^(head, tail) union keys^(tail))) & (length^(head) i= (lseg-length^(head, tail) + length^(tail))))))) &
			(((tail |-> loc next: virtual tn; int key: virtual tk) * list^(tn)) -* ((lseg^(head, tn) & ((lseg-keys^(head, tn) s= (lseg-keys^(head, tail) union (singleton tk))) & (lseg-length^(head, tn) i= (lseg-length^(head, tail) + 1))) ) * list^(tn)))
	   ) ;

define relation sorted-lseg^(head, tail): 
  ( 
	(((head l= tail) | ((head l= nil) & (tail l= nil))) & emp) | 
          ((head |-> loc next: nxt; int key: ky) * (sorted-lseg^(nxt, tail) & (ky lt-set lseg-keys^(nxt, tail))))  
  ) 
axiom: ( 
			((((head l= tail) => (emp & ((lseg-length^(head, tail) i= 0) & (lseg-keys^(head, tail) s= emptyset)))) &
			((tail l= nil) => (sorted-list^(head) & ((length^(head) i= lseg-length^(head, tail)) & (keys^(head) s= lseg-keys^(head, tail)))))) &
			(sorted-list^(tail) -* ((lseg-keys^(head, tail) le keys^(tail)) => (sorted-list^(head) & ((keys^(head) s= (lseg-keys^(head, tail) union keys^(tail))) & (length^(head) i= (lseg-length^(head, tail) + length^(tail)))))))) &
			(((tail |-> loc next: virtual tn; int key: virtual tk) * list^(tn)) -* (((lseg-keys^(head, tail) set-lt tk) => (sorted-lseg^(head, tn) & ((lseg-keys^(head, tn) s= (lseg-keys^(head, tail) union (singleton tk))) & (lseg-length^(head, tn) i= (lseg-length^(head, tail) + 1))) )) * list^(tn)))
	   ) ;

define bin-set-fun lseg-keys^(head, tail):
  (case ((head l= tail) | ((head l= nil) & (tail l= nil))) : emptyset;
   case ((head |-> loc next: nxt; int key: ky) * true): 
   	((singleton ky) union lseg-keys^(nxt, tail));
   default: emptyset
  ) ;

define bin-int-fun lseg-length^(head, tail):
  (case (head l= tail) : 0;
   case ((head |-> loc next: nxt; int key: ky) * true): 
   	(1 + lseg-length^(nxt, tail));
   default: 0
  ) ;


bb sort-merge-loop-pre:
pre: ((sorted-list^(l1) & (k1 s= keys^(l1))) * (sorted-list^(l2) & (k2 s= keys^(l2))));
post: (((((sorted-list^(l1) * sorted-list^(l2)) * ((x |-> loc next: y) * sorted-list^(y))) & ((((keys^(l1) union keys^(l2)) union keys^(y)) s= (k1 union k2)) * true)) & 
		(((y l= nil) & (cur l= x)) | (((sorted-lseg^(y, cur) & (lseg-keys^(y, cur) set-lt kcur)) * ((cur |-> loc next: nill; int key: kcur) & (nill l= nil))) * true))) & (((keys^(y) lt keys^(l1)) * true) 
		& ((keys^(y) lt keys^(l2)) * true)));
{
	malloc x;
	loc cur := x;
	loc y := nil;
	loc x.next := y;
}

bb merge-sort-loop-inductive1:
pre: (((((sorted-list^(l1) * sorted-list^(l2)) * ((x |-> loc next: y) * sorted-list^(y))) & ((((keys^(l1) union keys^(l2)) union keys^(y)) s= (k1 union k2)) * true)) & 
		(((y l= nil) & (cur l= x)) | (((sorted-lseg^(y, cur) & (lseg-keys^(y, cur) set-lt kcur)) * ((cur |-> loc next: nill; int key: kcur) & (nill l= nil))) * true))) & (((keys^(y) lt keys^(l1)) * true) 
		& ((keys^(y) lt keys^(l2)) * true)));
post: (((((sorted-list^(l1) * sorted-list^(l2)) * ((x |-> loc next: y) * sorted-list^(y))) & ((((keys^(l1) union keys^(l2)) union keys^(y)) s= (k1 union k2)) * true)) & 
		(((y l= nil) & (cur l= x)) | (((sorted-lseg^(y, cur) & (lseg-keys^(y, cur) set-lt kcur)) * ((cur |-> loc next: nill; int key: kcur) & (nill l= nil))) * true))) & (((keys^(y) lt keys^(l1)) * true) 
		& ((keys^(y) lt keys^(l2)) * true)));
{
	assume ((! (l1 l== nil)) && (! (l2 l== nil)));
	int d1 := l1.key;
	int d2 := l2.key;
	int cmp := d1 - d2;
	assume (cmp <= 0);
	loc cur.next := l1;
	loc cur := l1;
	assume (y l== nil);
	loc y := cur;
	loc l1 := cur.next;
	loc nill := nil;
	loc cur.next := nill;
	int kcur := cur.key;
}

bb merge-sort-loop-inductive2:
pre: (((((sorted-list^(l1) * sorted-list^(l2)) * ((x |-> loc next: y) * sorted-list^(y))) & ((((keys^(l1) union keys^(l2)) union keys^(y)) s= (k1 union k2)) * true)) & 
		(((y l= nil) & (cur l= x)) | (((sorted-lseg^(y, cur) & (lseg-keys^(y, cur) set-lt kcur)) * ((cur |-> loc next: nill; int key: kcur) & (nill l= nil))) * true))) & (((keys^(y) lt keys^(l1)) * true) 
		& ((keys^(y) lt keys^(l2)) * true)));
post: (((((sorted-list^(l1) * sorted-list^(l2)) * ((x |-> loc next: y) * sorted-list^(y))) & ((((keys^(l1) union keys^(l2)) union keys^(y)) s= (k1 union k2)) * true)) & 
		(((y l= nil) & (cur l= x)) | (((sorted-lseg^(y, cur) & (lseg-keys^(y, cur) set-lt kcur)) * ((cur |-> loc next: nill; int key: kcur) & (nill l= nil))) * true))) & (((keys^(y) lt keys^(l1)) * true) 
		& ((keys^(y) lt keys^(l2)) * true)));
{
	assume ((! (l1 l== nil)) && (! (l2 l== nil)));
	int d1 := l1.key;
	int d2 := l2.key;
	int cmp := d1 - d2;
	assume (cmp <= 0);
	loc cur.next := l1;
	loc cur := l1;
	assume (! (y l== nil));
	loc l1 := cur.next;
	loc nill := nil;
	loc cur.next := nill;
	int kcur := cur.key;
}

bb merge-sort-loop-inductive3:
pre: (((((sorted-list^(l1) * sorted-list^(l2)) * ((x |-> loc next: y) * sorted-list^(y))) & ((((keys^(l1) union keys^(l2)) union keys^(y)) s= (k1 union k2)) * true)) & 
		(((y l= nil) & (cur l= x)) | (((sorted-lseg^(y, cur) & (lseg-keys^(y, cur) set-lt kcur)) * ((cur |-> loc next: nill; int key: kcur) & (nill l= nil))) * true))) & (((keys^(y) lt keys^(l1)) * true) 
		& ((keys^(y) lt keys^(l2)) * true)));
post: (((((sorted-list^(l1) * sorted-list^(l2)) * ((x |-> loc next: y) * sorted-list^(y))) & ((((keys^(l1) union keys^(l2)) union keys^(y)) s= (k1 union k2)) * true)) & 
		(((y l= nil) & (cur l= x)) | (((sorted-lseg^(y, cur) & (lseg-keys^(y, cur) set-lt kcur)) * ((cur |-> loc next: nill; int key: kcur) & (nill l= nil))) * true))) & (((keys^(y) lt keys^(l1)) * true) 
		& ((keys^(y) lt keys^(l2)) * true)));
{
	assume ((! (l1 l== nil)) && (! (l2 l== nil)));
	int d1 := l1.key;
	int d2 := l2.key;
	int cmp := d1 - d2;
	assume (0 < cmp);
	loc cur.next := l2;
	loc cur := l2;
	assume (y l== nil);
	loc y := cur;
	loc l2 := cur.next;
	loc nill := nil;
	loc cur.next := nill;
	int kcur := cur.key;
}

bb merge-sort-loop-inductive4:
pre: (((((sorted-list^(l1) * sorted-list^(l2)) * ((x |-> loc next: y) * sorted-list^(y))) & ((((keys^(l1) union keys^(l2)) union keys^(y)) s= (k1 union k2)) * true)) & 
		(((y l= nil) & (cur l= x)) | (((sorted-lseg^(y, cur) & (lseg-keys^(y, cur) set-lt kcur)) * ((cur |-> loc next: nill; int key: kcur) & (nill l= nil))) * true))) & (((keys^(y) lt keys^(l1)) * true) 
		& ((keys^(y) lt keys^(l2)) * true)));
post: (((((sorted-list^(l1) * sorted-list^(l2)) * ((x |-> loc next: y) * sorted-list^(y))) & ((((keys^(l1) union keys^(l2)) union keys^(y)) s= (k1 union k2)) * true)) & 
		(((y l= nil) & (cur l= x)) | (((sorted-lseg^(y, cur) & (lseg-keys^(y, cur) set-lt kcur)) * ((cur |-> loc next: nill; int key: kcur) & (nill l= nil))) * true))) & (((keys^(y) lt keys^(l1)) * true) 
		& ((keys^(y) lt keys^(l2)) * true)));
{
	assume ((! (l1 l== nil)) && (! (l2 l== nil)));
	int d1 := l1.key;
	int d2 := l2.key;
	int cmp := d1 - d2;
	assume (0 < cmp);
	loc cur.next := l2;
	loc cur := l2;
	assume (! (y l== nil));
	loc l2 := cur.next;
	loc nill := nil;
	loc cur.next := nill;
	int kcur := cur.key;
}

bb merge-sort-post1:
pre: (((((sorted-list^(l1) * sorted-list^(l2)) * ((x |-> loc next: y) * sorted-list^(y))) & ((((keys^(l1) union keys^(l2)) union keys^(y)) s= (k1 union k2)) * true)) & 
		(((y l= nil) & (cur l= x)) | (((sorted-lseg^(y, cur) & (lseg-keys^(y, cur) set-lt kcur)) * ((cur |-> loc next: nill; int key: kcur) & (nill l= nil))) * true))) & (((keys^(y) lt keys^(l1)) * true) 
		& ((keys^(y) lt keys^(l2)) * true)));
post: (sorted-list^(ret) & (keys^(ret) s= (k1 union k2)));
{
	assume ((l1 l== nil) || (l2 l== nil));
	assume (! (l1 l== nil));
	loc cur.next := l1;
	assume (y l== nil);
	loc y := cur.next;
	free x;
	loc ret := y;
}

bb merge-sort-post2:
pre: (((((sorted-list^(l1) * sorted-list^(l2)) * ((x |-> loc next: y) * sorted-list^(y))) & ((((keys^(l1) union keys^(l2)) union keys^(y)) s= (k1 union k2)) * true)) & 
		(((y l= nil) & (cur l= x)) | (((sorted-lseg^(y, cur) & (lseg-keys^(y, cur) set-lt kcur)) * ((cur |-> loc next: nill; int key: kcur) & (nill l= nil))) * true))) & (((keys^(y) lt keys^(l1)) * true) 
		& ((keys^(y) lt keys^(l2)) * true)));
post: (sorted-list^(ret) & (keys^(ret) s= (k1 union k2)));
{
	assume ((l1 l== nil) || (l2 l== nil));
	assume (! (l1 l== nil));
	loc cur.next := l1;
	assume (! (y l== nil));
	free x;
	loc ret := y;
}

bb merge-sort-post3:
pre: (((((sorted-list^(l1) * sorted-list^(l2)) * ((x |-> loc next: y) * sorted-list^(y))) & ((((keys^(l1) union keys^(l2)) union keys^(y)) s= (k1 union k2)) * true)) & 
		(((y l= nil) & (cur l= x)) | (((sorted-lseg^(y, cur) & (lseg-keys^(y, cur) set-lt kcur)) * ((cur |-> loc next: nill; int key: kcur) & (nill l= nil))) * true))) & (((keys^(y) lt keys^(l1)) * true) 
		& ((keys^(y) lt keys^(l2)) * true)));
post: (sorted-list^(ret) & (keys^(ret) s= (k1 union k2)));
{
	assume ((l1 l== nil) || (l2 l== nil));
	assume (l1 l== nil);
	loc cur.next := l2;
	assume (y l== nil);
	loc y := cur.next;
	free x;
	loc ret := y;
}

bb merge-sort-post4:
pre: (((((sorted-list^(l1) * sorted-list^(l2)) * ((x |-> loc next: y) * sorted-list^(y))) & ((((keys^(l1) union keys^(l2)) union keys^(y)) s= (k1 union k2)) * true)) & 
		(((y l= nil) & (cur l= x)) | (((sorted-lseg^(y, cur) & (lseg-keys^(y, cur) set-lt kcur)) * ((cur |-> loc next: nill; int key: kcur) & (nill l= nil))) * true))) & (((keys^(y) lt keys^(l1)) * true) 
		& ((keys^(y) lt keys^(l2)) * true)));
post: (sorted-list^(ret) & (keys^(ret) s= (k1 union k2)));
{
	assume ((l1 l== nil) || (l2 l== nil));
	assume (l1 l== nil);
	loc cur.next := l2;
	assume (! (y l== nil));
	free x;
	loc ret := y;
}