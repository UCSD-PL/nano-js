define pred list^(x): 
  ( 
	((x l= nil) & emp) | 
          ((x |-> loc next: nxt; int key: ky) * list^(nxt))
  ) ;
  
define set-fun keys^(x):
  (case (x l= nil): emptyset;
   case ((x |-> loc next: nxt; int key: ky) * true): 
   	((singleton ky) union keys^(nxt));
   default: emptyset
  ) ;


define lset-fun reachnodes^(x):
  (case (x l= nil): emptylset;
   case ((x |-> loc next: nxt; int key: ky) * true): 
   	((lsingleton x) lunion reachnodes^(nxt));
   default: emptylset
  ) ;


define relation lseg^(head, tail): 
  ( 
	(((head l= tail) | ((head l= nil) & (tail l= nil))) & emp) | 
          ((head |-> loc next: nxt; int key: ky) * lseg^(nxt, tail))  
  ) 
axiom: ( 
			(list^(tail) -* (list^(head) & (keys^(head) s= (lseg-keys^(head, tail) union keys^(tail))))) &
			(((tail |-> loc next: virtual tn; int key: virtual tk) * list^(tn)) -* ((lseg^(head, tn) & (lseg-keys^(head, tn) s= (lseg-keys^(head, tail) union (singleton tk)))) * list^(tn))) 
	   ) ;

define bin-set-fun lseg-keys^(head, tail):
  (case ((head l= tail) | ((head l= nil) & (tail l= nil))) : emptyset;
   case ((head |-> loc next: nxt; int key: ky) * true): 
   	((singleton ky) union lseg-keys^(nxt, tail));
   default: emptyset
  ) ;


bb remove-loop-pre:
pre: (list^(x) & (((~ (link l= nil)) & lseg^(x, link)) * true));
post: ((list^(x) & (((~ (link l= nil)) & lseg^(x, link)) * true)) & (((prev l= nil) & (x l= tmp)) | (((lseg^(x, prev) * (prev |-> loc next: tmp; int key: tp)) * lseg^(tmp, link)) * list^(link))));
{
	loc prev := nil;
	loc tmp := x;
}


bb remove-loop-inductive:
pre:((list^(x) & (((~ (link l= nil)) & lseg^(x, link)) * true)) & (((prev l= nil) & (x l= tmp)) | (((lseg^(x, prev) * (prev |-> loc next: tmp; int key: tp)) * lseg^(tmp, link)) * list^(link))));
post:((list^(x) & (((~ (link l= nil)) & lseg^(x, link)) * true)) & (((prev l= nil) & (x l= tmp)) | (((lseg^(x, prev) * (prev |-> loc next: tmp; int key: tp)) * lseg^(tmp, link)) * list^(link))));
{
	assume (! (tmp l== nil));
	assume (! (tmp l== link));
	loc prev := tmp;
	loc tmp := prev.next;
	int tp := prev.key;
}

bb remove-loop-post1:
pre:((list^(x) & (((~ (link l= nil)) & lseg^(x, link)) * true)) & (((prev l= nil) & (x l= tmp)) | (((lseg^(x, prev) * (prev |-> loc next: tmp; int key: tp)) * lseg^(tmp, link)) * list^(link))));
post:(list^(ret) * ((link |-> loc next: z) & (z l= nil)));
{
	assume (tmp l== nil);
	loc ret := x;
}

bb remove-loop-post2:
pre:((list^(x) & (((~ (link l= nil)) & lseg^(x, link)) * true)) & (((prev l= nil) & (x l= tmp)) | (((lseg^(x, prev) * (prev |-> loc next: tmp; int key: tp)) * lseg^(tmp, link)) * list^(link))));
post:(list^(ret) * ((link |-> loc next: z) & (z l= nil)));
{
	assume (! (tmp l== nil));
	assume (tmp l== link);
	assume (prev l== nil);
	assume (! (x l== tmp));
	loc z := nil;
	loc tmp.next := z;
	loc ret := x;
}

bb remove-loop-post3:
pre:((list^(x) & (((~ (link l= nil)) & lseg^(x, link)) * true)) & (((prev l= nil) & (x l= tmp)) | (((lseg^(x, prev) * (prev |-> loc next: tmp; int key: tp)) * lseg^(tmp, link)) * list^(link))));
post:(list^(ret) * ((link |-> loc next: z) & (z l= nil)));
{
	assume (! (tmp l== nil));
	assume (tmp l== link);
	assume (prev l== nil);
	assume (x l== tmp);
	loc x := tmp.next;
	loc z := nil;
	loc tmp.next := z;
	loc ret := x;
}


bb remove-loop-post4:
pre:((list^(x) & (((~ (link l= nil)) & lseg^(x, link)) * true)) & (((prev l= nil) & (x l= tmp)) | (((lseg^(x, prev) * (prev |-> loc next: tmp; int key: tp)) * lseg^(tmp, link)) * list^(link))));
post:(list^(ret) * ((link |-> loc next: z) & (z l= nil)));
{
	assume (! (tmp l== nil));
	assume (tmp l== link);
	assume (! (prev l== nil));
	loc u := tmp.next;
	loc prev.next := u;
	assume (! (x l== tmp));
	loc z := nil;
	loc tmp.next := z;
	loc ret := x;
}

bb remove-loop-post5:
pre:((list^(x) & (((~ (link l= nil)) & lseg^(x, link)) * true)) & (((prev l= nil) & (x l= tmp)) | (((lseg^(x, prev) * (prev |-> loc next: tmp; int key: tp)) * lseg^(tmp, link)) * list^(link))));
post:(list^(ret) * ((link |-> loc next: z) & (z l= nil)));
{
	assume (! (tmp l== nil));
	assume (tmp l== link);
	assume (! (prev l== nil));
	loc u := tmp.next;
	loc prev.next := u;
	assume (x l== tmp);
	loc x := tmp.next;
	loc z := nil;
	loc tmp.next := z;
	loc ret := x;
}