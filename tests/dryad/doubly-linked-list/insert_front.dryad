define pred dll^(x):
 (
	 (((x l= nil) & emp) |

	  ((x |-> loc next: y) & (y l= nil))) |

	   (
	        (((x |-> loc next: nxt) * (nxt |-> secondary prev: x)) * true) &
	        (  (x |-> loc next: nxt) * ((~(nxt l= nil)) & dll^(nxt)) )
		)
 )
 
 define set-fun keys^(x):
  (case (x l= nil): emptyset;
   case ((x |-> loc next: nxt; int key: ky) * true): 
   	((singleton ky) union keys^(nxt));
   default: emptyset
  ) ;

bb insert-nil:
pre: (dll^(x) & (keys^(x) s= xk)) ;
post: (dll^(ret) & (keys^(ret) s= (xk union (singleton k)))) ;
{
	assume (x l== nil);
	malloc z;
	int z.key := k;
	loc ret := z; 
}

bb insert-at-front:
pre: (dll^(x) & (keys^(x) s= xk)) ;
post: (dll^(ret) & (keys^(ret) s= (xk union (singleton k)))) ;
{
	assume (! (x l== nil));
	malloc z;
	loc z.next := x;
	loc x.prev := z;
	int z.key := k;
	loc ret := z;
}