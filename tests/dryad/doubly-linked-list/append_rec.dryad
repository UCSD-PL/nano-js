define pred dll^(x):
 (
	 (((x l= nil) & emp) |

	  ((x |-> loc next: y) & (y l= nil))) |

	   (
	        (((x |-> loc next: nxt) * (nxt |-> secondary prev: x)) * true) &
	        (  (x |-> loc next: nxt) * ((~(nxt l= nil)) & dll^(nxt)) )
		)
 );
  
define set-fun keys^(x):
  (case (x l= nil): emptyset;
   case ((x |-> loc next: nxt; int key: ky) * true): 
   	((singleton ky) union keys^(nxt));
   default: emptyset
  ) ;

method dll-append(loc x1, loc x2)
requires: ((dll^(x1) & (keys^(x1) s= x1ks)) * (dll^(x2) & (keys^(x2) s= x2ks))) ;
ensures: (dll^(ret) & (keys^(ret) s= (x1ks union x2ks))) ;

bb merge-op1-nil:
pre: ((dll^(x1) & (keys^(x1) s= x1ks)) * (dll^(x2) & (keys^(x2) s= x2ks))) ;
post: (dll^(ret) & (keys^(ret) s= (x1ks union x2ks))) ;
{
	assume (x1 l== nil);
	loc ret := x2; 
}

bb merge-recursive:
pre: ((dll^(x1) & (keys^(x1) s= x1ks)) * (dll^(x2) & (keys^(x2) s= x2ks))) ;
post: (dll^(ret) & (keys^(ret) s= (x1ks union x2ks))) ;
{
	assume (! (x1 l== nil));
	loc z := x1.next;
	loc t := dll-append(z, x2);
	loc x1.next := t; 
	loc t.prev = x1;
	loc ret := x1; 
}

bb merge-recursive-pre:
pre: ((dll^(x1) & (keys^(x1) s= x1ks)) * (dll^(x2) & (keys^(x2) s= x2ks))) ;
post:  ((dll^(z)  * dll^(x2)) * true) ;
{
	assume (! (x1 l== nil));
	loc z := x1.next;
}