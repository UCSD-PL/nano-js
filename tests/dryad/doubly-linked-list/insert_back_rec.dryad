define pred dll^(x):
 (
	 (((x l= nil) & emp) |

	  ((x |-> loc next: y) & (y l= nil))) |

	   (
	        (((x |-> loc next: nxt) * (nxt |-> secondary prev: x)) * true) &
	        (  (x |-> loc next: nxt) * ((~(nxt l= nil)) & dll^(nxt)) )
		)
 )

  define set-fun keys^(x):
  (case (x l= nil): emptyset;
   case ((x |-> loc next: nxt; int key: ky) * true): 
   	((singleton ky) union keys^(nxt));
   default: emptyset
  ) ;


method dll-insert(loc x, int k)
requires: (dll^(x) & (keys^(x) s= kk)) ;
ensures: (dll^(ret) & (keys^(ret) s= (kk union (singleton k)))) ;

bb insert-nil:
pre: (dll^(x) & (keys^(x) s= kk)) ;
post: (dll^(ret) & (keys^(ret) s= (kk union (singleton k)))) ;
{
	assume (x l== nil);
	malloc z;
	int z.key := k;
	loc ret := z; 
}

bb insert-recursive:
pre: (dll^(x) & (keys^(x) s= kk)) ;
post: (dll^(ret) & (keys^(ret) s= (kk union (singleton k)))) ;
{
	assume (! (x l== nil));
	loc z := x.next;
	loc t := dll-insert(z; k);
	loc x.next := t;
	loc t.prev := x;
	loc ret := x;
}

bb insert-recursive-pre:
pre: (dll^(x) & (keys^(x) s= kk)) ;
post: (dll^(z) * true) ;
{
	assume (! (x l== nil));
	loc z := x.next;
}
